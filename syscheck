#!/usr/bin/perl -w

use strict;
use warnings;
use feature qw( switch );
no warnings "experimental::smartmatch";
use Term::ANSIColor;
use Data::Dumper;
use Getopt::Long qw( :config no_ignore_case bundling );

use YAML qw( LoadFile );
use MIME::Lite;

my ($help,$verbose,$config);
$verbose = 0;
GetOptions(
	'h|help'		=>	\$help,
	'v|verbose+'	=>	\$verbose,
	'c|config=s'	=>	\$config,
);

&usage if ($help);

if (scalar(@ARGV) > 1) {
	print colored("Only one action verb expected.  Got ".scalar(@ARGV).".\n", "bold red");
	&usage;
}

if (scalar(@ARGV) == 0) {
	print colored("At least one action verb expected.  Got 0. \n", "bold red");
	&usage;
}

if ((!defined($config)) or ($config eq "")) {
	print colored("You must specify a config file.  Otherwise, my output will be lost to the ether, and I don't like doing that. \n", "bold red");
	&usage;
}

our $CONFIG = &get_config($config);

print Dumper($CONFIG) if (($verbose)  and ($verbose > 1));

my $action = $ARGV[0];

given ($action) {
	when (/(?:mounts|fs|filesystems)/) {
		# check the mounts
		# mail if meet threshold
		print colored("Checking mounts .... \n", "bold green");
	}
	when (/memory/) {
		# check memory
		# mail if meet threshold
		print colored("Checking memory ..... \n", "bold green");
		open FREE, "/usr/bin/free -ot |" or die "There was a problem loading the free utility: $! \n";
		while (my $line = <FREE>) {
			chomp($line);
			given ($line) {
				when (/total\s+used\s+free\s+shared\s+buffers\s+cached/) {
					# skip the header
					next;
				}
				when (/Mem:\s+(\d+)\s+(\d+)\s+(\d+).*/) {
					my $t = $1; my $u = $2; my $f = $3;
					my $p = ($f * 100) / $t;
					if (($p > 5) and ($p <= 10)) {
						print colored("Sending notice...\n", "bold yellow") if ($verbose);
						&send_notice('memory');
					} elsif (($p > 1) and ($p <= 5)) {
						print colored("Sending warning... \n", "yellow") if ($verbose);
						&send_warning('memory');
					} elsif ($p <= 1) {
						print colored("Sending critical.... \n", "bold red") if ($verbose);
						&send_critical('memory');
					} else {
						print colored("Within operational parameters... \n", "green") if ($verbose);
						print colored(sprintf("%-3.2f%% free", $p)." \n", "green") if ($verbose);
					}
				}
				when (/Swap:\s+(\d+)\s+(\d+)\s+(\d+).*/) {
					my $t = $1; my $u = $2; my $f = $3;
					my $p = ($f * 100) / $t;
					if (($p > 5) and ($p <= 10)) {
						print colored("Sending notice...\n", "bold yellow") if ($verbose);
						&send_notice('memory');
					} elsif (($p > 1) and ($p <= 5)) {
						print colored("Sending warning... \n", "yellow") if ($verbose);
						&send_warning('memory');
					} elsif ($p <= 1) {
						print colored("Sending critical.... \n", "bold red") if ($verbose);
						&send_critical('memory');
					} else {
						print colored("Within operational parameters... \n", "green") if ($verbose);
						print colored(sprintf("%-3.2f%% free", $p)." \n", "green") if ($verbose);
					}
				}
				when (/Total:\s+(\d+)\s+(\d+)\s+(\d+).*/) {
					my $t = $1; my $u = $2; my $f = $3;
					my $p = ($f * 100) / $t;
					if (($p > 5) and ($p <= 10)) {
						print colored("Sending notice...\n", "bold yellow") if ($verbose);
						&send_notice('memory');
					} elsif (($p > 1) and ($p <= 5)) {
						print colored("Sending warning... \n", "yellow") if ($verbose);
						&send_warning('memory');
					} elsif ($p <= 1) {
						print colored("Sending critical.... \n", "bold red") if ($verbose);
						&send_critical('memory');
					} else {
						print colored("Within operational parameters... \n", "green") if ($verbose);
						print colored(sprintf("%-3.2f%% free", $p)." \n", "green") if ($verbose);
					}
				}
				default {
					# do nothing;
					print "Line didn't match! \n" if ($verbose);
					print "$line \n" if ($verbose);
				}
			}
		}
		close FREE or die "There was a problem closing the free utility: $! \n";
	}
	default {
		die colored("Unrecognized action: $action \n", "bold red");
	}
}

###############################################################################
# Subs
###############################################################################
sub usage {
	print <<END;

Usage $0 [-h|--help] [-v|--verbose] [-c|--config] <config file> action

Where:

-h|--help			Displays this useful message, then exits.
-v|--verbose			Prints more verbose output.  Usually used for debugging.
-c|--config			Specifies the config file to use.  Cannot operate without
				a valid YAML config file.

ACTIONS are as follows:

memory				Check the memory and swap for usage data. Emails 
				notification if/when threashold reached.  Thresholds 
				specified in config file.
mounts|fs|filesystems		Check the filesystems for usage data.  Emails
				notification if/when threshold reached.  Thresholds
				specified in config file.

END

	exit 1;			# exit "true" in the absence of a true boolean
}

sub get_config {
	my $config_file = shift(@_);

	my $config_ref = LoadFile($config_file);
	return $config_ref;
}

sub send_message {
	my $severity = shift(@_);
	my $app = shift(@_);

	return 1;
}

sub send_notice {
	my $app = shift(@_);
	&send_message(1, $app);

	return 1;
}

sub send_warning {
	my $app = shift(@_);
	&send_message(2, $app);

	return 1;
}

sub send_critical {
	my $app = shift(@_);
	&send_message(3, $app);

	return 1;
}
